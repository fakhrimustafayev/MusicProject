 @* @model MusicProject.Models.TrackRecommendationResponse *@
     @model MusicProject.ViewModels.IndexViewModel
@{
    Layout = "";
} 

 <!doctype html>
<html lang="en" dir="ltr">
@await Html.PartialAsync("/Views/Partials/HeaderPartial.cshtml")
<body class="  ">
    <!-- loader Start -->
    <div id="loading">
        <div class="loader simple-loader">
            <div class="loader-body ">
                <img src="~/assets/images/loader.gif" alt="loader" class=" img-fluid ">
            </div>
        </div>
    </div>
    <!-- loader END -->
    @await Html.PartialAsync("/Views/Partials/AsidePartial.cshtml")
    <main class="main-content">
        @await Html.PartialAsync("/Views/Partials/Navbar2.cshtml")
        <div class="content-inner container-fluid pb-0" id="page_layout">
            <div class="row mb-4">
                <div class="col-lg-12">
                    <div class="swiper-container overflow-hidden" data-swiper="songs-slider">
                        <div class="swiper-wrapper p-0 list-unstyled mb-0" style="display: flex;">
                            @foreach (var track in Model.GetTrackResponses)
                            {
                                <div class="swiper-slide mb-3 col-md-4" style="flex: 0 0 auto; width: 200px;">
                                    <div class="card" style="margin-right: 10px; margin-bottom: 10px;">
                                        <img src="@track.tracks[0].album.images.FirstOrDefault()?.url" class="card-img-top" alt="@track.tracks[0].name" style="object-fit: cover; width: 210px; height: 200px;">
                                        <div class="card-body" style="width: 210px; height: 200px;">
                                            <h5 class="card-title text-truncate" style="max-width: 100%;">@track.tracks[0].name</h5>
                                            <p class="card-text text-truncate" style="max-width: 100%;">@string.Join(", ", track.tracks[0].artists.Select(a => a.name))</p>
                                            <a href="@Url.Action("AddTrackToFavorites", "Account", new { id = track.tracks[0].id })" class="btn btn-primary toggle-favorite" data-track-id="@track.tracks[0].id">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                                                </svg>
                                            </a>
                                            <button class="btn btn-primary play-preview" data-preview-url="@track.tracks[0].preview_url">Play</button>
                                            <audio class="audio-preview" preload="none" src="@track.tracks[0].preview_url"></audio>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                    <script>
                        // Wait for the document to be fully loaded
                        document.addEventListener("DOMContentLoaded", function () {
                            // Get all elements with the class "play-preview"
                            const playButtons = document.querySelectorAll(".play-preview");
                            const audioElements = document.querySelectorAll(".audio-preview");

                            // Function to pause all other audio elements except the specified one
                            function pauseOtherAudioElements(currentAudio) {
                                audioElements.forEach(audio => {
                                    if (audio !== currentAudio && !audio.paused) {
                                        audio.pause(); // Pause the audio
                                        const playButton = audio.parentElement.querySelector(".play-preview");
                                        if (playButton) {
                                            playButton.textContent = "Play"; // Change button text back to "Play"
                                        }
                                    }
                                });
                            }

                            // Iterate over each play button
                            playButtons.forEach(button => {
                                // Add a click event listener to each button
                                button.addEventListener("click", function (event) {
                                    event.preventDefault(); // Prevent default button behavior
                                    const previewUrl = button.getAttribute("data-preview-url");
                                    if (previewUrl) {
                                        // Get the associated audio element
                                        const audio = button.parentElement.querySelector(".audio-preview");
                                        if (audio) {
                                            // Pause all other audio elements except the current one
                                            pauseOtherAudioElements(audio);
                                            // Check if the audio is currently playing
                                            if (audio.paused) {
                                                audio.play(); // Play the audio
                                                button.textContent = "Pause"; // Change button text to "Pause"
                                            } else {
                                                audio.pause(); // Pause the audio
                                                button.textContent = "Play"; // Change button text back to "Play"
                                            }
                                        }
                                    } else {
                                        console.log("Preview URL not available.");
                                    }
                                });
                            });
                        });

                    </script>

                </div>
            </div>
            <script>
                $(document).ready(function () {
                    $('.btn-danger').click(function () {
                        var trackId = $(this).data('track-id');

                        $.ajax({
                            type: 'POST',
                            url: '/Track/ToggleFavorite',
                            data: { trackId: trackId, isFavorite: true }, // Set isFavorite to true to remove from favorites
                            success: function (response) {
                                if (response.success) {
                                    // Remove the card from the UI
                                    $(this).closest('.col-md-4').remove();
                                } else {
                                    alert('Error removing from favorites.');
                                }
                            },
                            error: function () {
                                alert('Error removing from favorites.');
                            }
                        });
                    });
                });
            </script>

        <div class="card border-top mb-0">
            <diiv class="card-body">
                <div class="d-flex align-items-center justify-content-between flex-md-row flex-column gap-3">
                    <div class="">

                        <small>
                            Copyright <span id="copyright">
                                <script>document.getElementById('copyright').appendChild(document.createTextNode(new Date().getFullYear()))</script>
                            </span>. Made with love by Fakhri Mustafayev.
                        </small>
                    </div>
                </div>
            </diiv>
        </div></div>
        </div>
        </div>
        </div>
    </main>
    <!--Footer Start-->
    <!-- Footer Section Start -->
   @*  @await Html.PartialAsync("/Views/Partials/Footer.cshtml") *@
    <!-- Footer Section End -->        <!--Footer End-->
    <!--Burger Menu Start-->
    @await Html.PartialAsync("/Views/Partials/BurgerMenu.cshtml")
    <!--Burger Menu End-->
    <!-- Wrapper End-->
    @await Html.PartialAsync("/Views/Partials/Scripts.cshtml")

</body>
</html>
<style>
    .favoriteDivv{
        display:flex;
        flex-wrap:wrap;
        justify-content:space-between;
    }

    .favoriteTrackk{
        width:fit-content;
        height:fit-content;
    }
</style>